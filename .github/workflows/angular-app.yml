name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  # REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }} 

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3           

    - name: use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 22.17.0
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present




    # - name: login to DockerHub
    #   uses: docker/login-action@v2
    #   with:
    #     registry: ${{ env.REGISTRY }}
    #     username: ${{secrets.DOCKERHUB_USERNAME}}
    #     password: ${{secrets.DOCKERHUB_PASSWORD}}


    # - name: Build Docker Compose services
    #   run: docker compose build

    # - name: Push Docker Compose images to Docker Hub
    #   run: docker compose push 

    # - name: Pull Docker Compose images from Docker Hub
    #   run: docker compose pull 

      # - name: build the docker image method 1
    #   id: build-docker-image
    #   run: |
    #     ls -la 
    #     docker build . -f Dockerfile -t maxtheservice/demo:latest
    # - name: push the docker image
    #   id: push-docker-image
    #   run: docker push ${{secrets.DOCKERHUB_USERNAME}}/demo:latest

    # - name: Extract metadata (tags, labels) for Docker
    #   id: meta
    #   uses: docker/metadata-action@v5
    #   with:
    #        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}


    # - name: Build and Push to DockerHub method 2
    #   uses: docker/build-push-action@v6
    #   with:
    #     context: .
    #     push: true
    #     labels: ${{ steps.meta.outputs.labels }}   
    #     tags: maxtheservice/demo:latest
    #     # tags: ${{ steps.meta.outputs.tags }}
    #     # annotations: ${{ steps.meta.outputs.annotations }}     
      


























    - name: check images before pull
      run: docker images

    # - name: pull the image
    #   run: docker pull maxtheservice/demo:latest

    # - name: check images after pull
    #   run: docker images

    # - name: Inspect
    #   run: |
    #     docker image inspect maxtheservice/demo:latest      
    # - name: remove all services
    #   run: docker compose down --rmi all # remove all containers

    # - name: Run Docker Container
    #   run: docker run -p 8080:80 --name demo-container maxtheservice/demo:latest      

    # - name: check containers
    #   run: docker ps

    # - name: remove all services
    #   run: docker compose down --rmi all # remove all containers

    # - name: Start Docker Compose services
    #   run: docker compose up --build # Build and start containers
    # # - name: Wait for MySQL to be ready
    # #   run: |
    # #     for i in $(seq 1 10); do
    # #       docker-compose exec mysql mysqladmin ping -h localhost --silent && break
    # #       echo "Waiting for MySQL..."
    # #       sleep 5
    # #     done
    # - name: Run integration tests
    #   run: mvn test # Run tests against the running services
    # - name: Stop Docker Compose services
    #   run: docker-compose down
